{"version":3,"file":"static/js/611.198da37e.chunk.js","mappings":"qRASe,SAASA,IACtB,OAAqCC,EAAAA,EAAAA,KAArC,IAAQC,MAAAA,OAAR,MAAgB,GAAhB,EAAoBC,EAApB,EAAoBA,aACdC,GAAWC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,MAAXD,OACR,EAAkDE,EAAAA,UAAwB,GAA1E,eAAOC,EAAP,KAA0BC,EAA1B,KAEA,GAAID,EAAmB,OAAO,SAAC,IAAD,IAE9B,IAAME,EAAW,mCAAG,WAAOC,GAAP,8EAClBF,GAAqB,GADH,UAGQG,EAAAA,EAAAA,GAAI,OAAQ,YAAa,CAAED,KAAAA,IAHnC,cAGZE,EAHY,gBAKZR,EAAO,YAAaQ,GAAa,GALrB,uBAMZR,EAAO,sBANK,OAOlBF,EAAS,KAPS,2CAAH,sDAUXW,EAASb,EAAMc,MAAK,kBAAuB,WAAvB,EAAGJ,QACvBK,EAAWf,EAAMc,MAAK,kBAAuB,aAAvB,EAAGJ,QACzBM,EAAQhB,EAAMc,MAAK,kBAAuB,UAAvB,EAAGJ,QAE5B,OACE,iBAAKO,MAAO,CAAEC,UAAW,UAAzB,WACE,SAAC,IAAD,CAAMC,IAAI,KAAV,oBAEEN,GAAUE,GAAYC,IAAWf,GACjC,iCACE,wBACE,oBAAQmB,QAAS,kBAAMX,EAAY,WAAnC,UAA+CI,EAAOQ,KAAtD,KAA8DR,EAAOH,KAArE,UAEF,wBACE,oBAAQU,QAAS,kBAAMX,EAAY,aAAnC,UAAiDM,EAASM,KAA1D,KAAkEN,EAASL,KAA3E,UAEF,wBACE,oBAAQU,QAAS,kBAAMX,EAAY,UAAnC,UAA8CO,EAAMK,KAApD,KAA4DL,EAAMN,KAAlE,YAIJ,kB,uFCjCKX,EAA6B,SAACuB,GACzC,OAAuCC,EAAAA,EAAAA,IAAO,cAAD,OAC7BC,EAAAA,UAAaF,GAAU,MACrC,SAACG,GAAD,OAAiBd,EAAAA,EAAAA,GAAI,MAAOc,MAFtBC,EAAR,EAAQA,KAAMzB,EAAd,EAAcA,aAKd,MAAO,CACLG,OANF,EAA4BA,OAO1BJ,MAAO0B,EACPzB,aAAcA","sources":["components/pages/Login/Login.tsx","hooks/api/users.ts"],"sourcesContent":["import { useLoadUsers } from 'hooks/api/users';\nimport React from \"react\";\nimport Text from \"components/uikit/Text\";\nimport Loader from \"components/uikit/Loader\";\nimport API from \"API\";\nimport { useSWRConfig } from \"swr\";\nimport { useNavigate } from \"react-router-dom\";\nimport { UserRoleType } from 'types/api/user';\n\nexport default function LoginPage() {\n  const { users = [], isValidating } = useLoadUsers();\n  const navigate = useNavigate();\n  const { mutate } = useSWRConfig();\n  const [isLoginInProgress, setIsLoginInProgress] = React.useState<boolean>(false);\n\n  if (isLoginInProgress) return <Loader />;\n\n  const handleLogin = async (role: UserRoleType) => {\n    setIsLoginInProgress(true);\n\n    const currentAuth = await API(\"POST\", \"/api/auth\", { role });\n\n    await mutate(\"/api/auth\", currentAuth, false);\n    await mutate(\"/api/notifications\");\n    navigate(\"/\");\n  };\n\n  const client = users.find(({ role }) => role === 'client');\n  const employee = users.find(({ role }) => role === 'employee');\n  const owner = users.find(({ role }) => role === 'owner');\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <Text tag=\"h1\">Login:</Text>\n\n      {(client && employee && owner) && !isValidating ? (\n        <>\n          <p>\n            <button onClick={() => handleLogin(\"client\")}>{client.name} [{client.role}]</button>\n          </p>\n          <p>\n            <button onClick={() => handleLogin(\"employee\")}>{employee.name} [{employee.role}]</button>\n          </p>\n          <p>\n            <button onClick={() => handleLogin(\"owner\")}>{owner.name} [{owner.role}]</button>\n          </p>\n        </>\n      ) : (\n        'loading...'\n      )}\n    </div>\n  );\n}\n","import qs from 'query-string';\nimport useSWR, { KeyedMutator } from \"swr\";\nimport { UserRoleType, UserType, UserIncludesType } from 'types/api/user';\nimport API from \"API\";\n\ntype UseLoadUsers = <K extends keyof UserIncludesType | never = never>(params?: {\n  q?: string,\n  role?: UserRoleType,\n  includes?: K[],\n}) => {\n  users: UserType<K>[] | undefined,\n  mutate: KeyedMutator<Partial<UserType<K>>[]>,\n  isValidating: boolean,\n}\n\nexport const useLoadUsers: UseLoadUsers = (params) => {\n  const { data, isValidating, mutate } = useSWR(\n    `/api/users?${qs.stringify(params || {})}`,\n    (url: string) => API(\"GET\", url),\n  );\n\n  return {\n    mutate,\n    users: data,\n    isValidating: isValidating,\n  };\n};\n"],"names":["LoginPage","useLoadUsers","users","isValidating","navigate","useNavigate","mutate","useSWRConfig","React","isLoginInProgress","setIsLoginInProgress","handleLogin","role","API","currentAuth","client","find","employee","owner","style","textAlign","tag","onClick","name","params","useSWR","qs","url","data"],"sourceRoot":""}
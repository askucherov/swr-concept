{"version":3,"file":"static/js/203.0eef2cb6.chunk.js","mappings":"yPAMe,SAASA,IACtB,IAAQC,GAAUC,EAAAA,EAAAA,GAAa,CAAEC,KAAM,WAAYC,SAAU,CAAC,OAAQ,YAA9DH,MAER,OACE,UAACI,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,KAEA,SAACC,EAAA,EAAD,CAAMC,IAAI,KAAV,uBAECP,EACGA,EAAMQ,KAAI,SAACC,EAAMC,GAAP,OACV,4BACE,UAACJ,EAAA,EAAD,CAAMC,IAAI,KAAV,UAAgBG,EAAI,EAApB,KAAyBD,EAAKE,SAE9B,UAACL,EAAA,EAAD,CAAMC,IAAI,OAAV,wBAA6BE,EAAKG,KAAKC,UAAa,mBACpD,UAACP,EAAA,EAAD,CAAMC,IAAI,OAAV,uBAA4BE,EAAKK,OAAOC,QAAU,MAAQ,SAC1D,mBAAM,oBALEN,EAAKO,OAQf,gBCnBK,SAASC,IACtB,IAAuBR,GAAWS,EAAAA,EAAAA,KAA1BC,YAAeV,KAEvB,MAAmB,WAAX,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMP,OAAyB,SAAC,EAAD,KAE5B,SAAC,KAAD,CAAUkB,GAAIC,EAAAA,EAAAA,Y,gGCPjBC,EAAeC,EAAAA,MAAW,kBAAM,iCAChCC,EAAiBD,EAAAA,MAAW,kBAAM,iCAClCE,EAAcF,EAAAA,MAAW,kBAAM,iCAMtB,SAASnB,EAAT,GAAuC,IAArBsB,EAAoB,EAApBA,SACvBjB,GAASkB,EAAAA,EAAAA,KAATlB,KAQFL,EANqB,CACzBwB,OAAQN,EACRO,SAAUL,EACVM,MAAOL,GAGyBhB,EAAKP,MAEvC,OACE,SAAC,EAAA6B,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACE,SAAC5B,EAAD,UAASsB,Q,wHClBA,SAASrB,IACtB,IAAM4B,ECLO,WACb,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAQC,EAAAA,EAAAA,MAAY,SAACD,GAAD,SAAaE,EAAAA,EAAAA,IAAUF,EAAMG,KAAML,EAASM,aAEtE,IAAKJ,EAAO,MAAM,IAAIK,MAAM,mBAE5B,OAAOL,EDFcM,GAEfC,EAAkBV,EAAajB,KAAO4B,EAAAA,EAAAA,SACtCC,EAAoBZ,EAAajB,KAAO4B,EAAAA,EAAAA,UAE9C,OACE,iBAAKE,UAAU,oBAAf,WACE,SAAC,KAAD,CAAMA,UAAS,kCAA6BH,EAAkB,iCAAmC,IAAMvB,GAAIC,EAAAA,EAAAA,WAA3G,sBAGA,SAAC,KAAD,CAAMyB,UAAS,kCAA6BD,EAAoB,iCAAmC,IAAMzB,GAAIC,EAAAA,EAAAA,YAA7G,4B,uFEHOpB,EAA6B,SAAC8C,GACzC,OAAuCC,EAAAA,EAAAA,IAAO,cAAD,OAC7BC,EAAAA,UAAaF,GAAU,MACrC,SAACG,GAAD,OAAiBC,EAAAA,EAAAA,GAAI,MAAOD,MAFtBE,EAAR,EAAQA,KAAMC,EAAd,EAAcA,aAKd,MAAO,CACLC,OANF,EAA4BA,OAO1BtD,MAAOoD,EACPC,aAAcA,K,mECrBH,SAAS1B,IACtB,IAAQR,GAAgBD,EAAAA,EAAAA,KAAhBC,YAER,IAAKA,EAAYV,KAAM,MAAM,IAAIgC,MAAM,mBAEvC,MAAO,CAAEhC,KAAMU,EAAYV,Q,6CCEvBY,E,QAASgB,EAAAA,QAAc,SAACkB,EAAKnB,GAQjC,OAPAmB,EAAInB,EAAMpB,IAAM,SAACwC,GACf,MAA0BA,GAAW,GAA7BT,EAAR,EAAQA,OAAQU,EAAhB,EAAgBA,MACVlB,GAAOmB,EAAAA,EAAAA,IAAatB,EAAMG,KAAMQ,GAEtC,OAAOU,EAAK,UAAMlB,GAAN,OAAaU,EAAAA,UAAaQ,IAAWlB,GAG5CgB,IACN,IAMH","sources":["components/pages/Employees/Employees.tsx","components/pages/Employees/Resolver.tsx","components/shared/Layout/Layout.tsx","components/shared/SettingsNavMenu/SettingsNavMenu.tsx","hooks/useCurrentRoute.ts","hooks/api/users.ts","hooks/useCurrentAuth.ts","lib/Routes.ts"],"sourcesContent":["import Layout from \"components/shared/Layout\";\nimport SettingsNavMenu from 'components/shared/SettingsNavMenu';\nimport Text from \"components/uikit/Text\";\nimport { useLoadUsers } from \"hooks/api/users\";\nimport React from 'react';\n\nexport default function EmployeesPage() {\n  const { users } = useLoadUsers({ role: \"employee\", includes: ['firm', 'policy'] });\n\n  return (\n    <Layout>\n      <SettingsNavMenu />\n\n      <Text tag=\"h1\">Employees</Text>\n\n      {users\n        ? users.map((user, i) => (\n          <div key={user.id}>\n            <Text tag=\"h5\">{i + 1}. {user.name}</Text>\n\n            <Text tag=\"code\">Firm name: {user.firm.title}</Text><br />\n            <Text tag=\"code\">Can edit: {user.policy.canEdit ? 'yes' : 'no'}</Text>\n            <br /><br />\n          </div>\n          ))\n        : \"Loading...\"}\n    </Layout>\n  );\n}\n","import { useLoadCurrentAuth } from 'hooks/api/auth';\nimport Routes from 'lib/Routes';\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport Employees from './Employees';\n\nexport default function Resolver() {\n  const { currentAuth: { user } } = useLoadCurrentAuth();\n\n  if (user?.role === 'owner') return <Employees />;\n\n  return <Navigate to={Routes.login()} />\n}\n","import useCurrentAuth from 'hooks/useCurrentAuth';\nimport React, { Suspense } from \"react\";\nimport Loader from \"components/uikit/Loader\";\n\nconst ClientLayout = React.lazy(() => import(\"components/shared/Layout/ClientLayout\"));\nconst EmployeeLayout = React.lazy(() => import(\"components/shared/Layout/EmployeeLayout\"));\nconst OwnerLayout = React.lazy(() => import(\"components/shared/Layout/OwnerLayout\"));\n\ninterface IProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: IProps) {\n  const { user } = useCurrentAuth();\n\n  const mapRoleToComponent = {\n    client: ClientLayout,\n    employee: EmployeeLayout,\n    owner: OwnerLayout\n  };\n\n  const Layout = mapRoleToComponent[user.role];\n\n  return (\n    <Suspense fallback={<Loader />}>\n      <Layout>{children}</Layout>\n    </Suspense>\n  );\n}\n","import useCurrentRoute from 'hooks/useCurrentRoute';\nimport Routes from 'lib/Routes';\nimport React from \"react\";\nimport \"./SettingsNavMenu.css\";\nimport { Link } from 'react-router-dom';\nimport { routeIds } from 'routeConfig';\n\nexport default function SettingsNavMenu() {\n  const currentRoute = useCurrentRoute();\n\n  const isProfileActive = currentRoute.id === routeIds.settings;\n  const isEmployeesActive = currentRoute.id === routeIds.employees;\n\n  return (\n    <div className=\"settings-nav-menu\">\n      <Link className={`settings-nav-menu__item ${isProfileActive ? 'settings-nav-menu__item_active' : ''}`} to={Routes.settings()}>\n        Profile\n      </Link>\n      <Link className={`settings-nav-menu__item ${isEmployeesActive ? 'settings-nav-menu__item_active' : ''}`} to={Routes.employees()}>\n        Employees\n      </Link>\n    </div>\n  );\n}\n","import { matchPath, useLocation } from 'react-router-dom';\nimport { IRoute, routes } from 'routeConfig';\n\nexport default function useCurrentRoute(): IRoute {\n  const location = useLocation();\n\n  const route = routes.find((route) => !!matchPath(route.path, location.pathname));\n\n  if (!route) throw new Error('Route not found');\n\n  return route;\n}\n","import qs from 'query-string';\nimport useSWR, { KeyedMutator } from \"swr\";\nimport { UserRoleType, UserType, UserIncludesType } from 'types/api/user';\nimport API from \"API\";\n\ntype UseLoadUsers = <K extends keyof UserIncludesType | never = never>(params?: {\n  q?: string,\n  role?: UserRoleType,\n  includes?: K[],\n}) => {\n  users: UserType<K>[] | undefined,\n  mutate: KeyedMutator<Partial<UserType<K>>[]>,\n  isValidating: boolean,\n}\n\nexport const useLoadUsers: UseLoadUsers = (params) => {\n  const { data, isValidating, mutate } = useSWR(\n    `/api/users?${qs.stringify(params || {})}`,\n    (url: string) => API(\"GET\", url),\n  );\n\n  return {\n    mutate,\n    users: data,\n    isValidating: isValidating,\n  };\n};\n","import { useLoadCurrentAuth } from 'hooks/api/auth';\nimport { UserType } from 'types/api/user';\n\nexport default function useCurrentAuth(): { user: UserType } {\n  const { currentAuth } = useLoadCurrentAuth();\n\n  if (!currentAuth.user) throw new Error('User not loaded')\n\n  return { user: currentAuth.user };\n}\n","import qs from \"query-string\";\nimport { generatePath, Params } from 'react-router-dom';\nimport { routes, RouteIdType } from '../routeConfig';\n\ntype OptionsType = { params: Params, query: object };\n\ntype RoutesType = {\n  [key in RouteIdType]: (options?: OptionsType) => string;\n}\n\nconst Routes = routes.reduce((acc, route) => {\n  acc[route.id] = (options) => {\n    const { params, query } = options || {};\n    const path = generatePath(route.path, params);\n\n    return query ? `${path}${qs.stringify(query)}` : path;\n  }\n\n  return acc;\n}, {} as RoutesType);\n\n// Routes.home()\n// Routes.firmClient({ params: { code: 'AA1' } })\n// Routes.firmClientTasks({ query: { filter: 'resolved' } })\n\nexport default Routes;\n"],"names":["EmployeesPage","users","useLoadUsers","role","includes","Layout","SettingsNavMenu","Text","tag","map","user","i","name","firm","title","policy","canEdit","id","Resolver","useLoadCurrentAuth","currentAuth","to","Routes","ClientLayout","React","EmployeeLayout","OwnerLayout","children","useCurrentAuth","client","employee","owner","Suspense","fallback","currentRoute","location","useLocation","route","routes","matchPath","path","pathname","Error","useCurrentRoute","isProfileActive","routeIds","isEmployeesActive","className","params","useSWR","qs","url","API","data","isValidating","mutate","acc","options","query","generatePath"],"sourceRoot":""}
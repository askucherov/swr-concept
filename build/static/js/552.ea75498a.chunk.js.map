{"version":3,"file":"static/js/552.ea75498a.chunk.js","mappings":"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","sources":["components/pages/Messages/Message/Message.tsx","components/pages/Messages/Chat/Chat.tsx","hooks/api/messages.ts","components/pages/Messages/Messages.tsx","hooks/api/chats.ts","components/pages/Messages/Resolver.tsx","components/shared/Layout/Layout.tsx","components/uikit/Badge/Badge.tsx","hooks/useCurrentAuth.ts","lib/Routes.ts"],"sourcesContent":["import React, { useEffect } from \"react\";\n\nimport { MessageType } from 'types/api/message';\n\nimport \"./Message.css\";\n\ninterface IProps {\n  message: MessageType;\n  outgoing: boolean;\n  onMount: (message: MessageType) => void;\n}\n\nexport default function Message({ message, outgoing, onMount }: IProps) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => onMount(message),[]);\n\n  return (\n    <div className={`message ${outgoing ? 'message_outgoing' : ''}`}>\n      {message.text}\n\n      <div className=\"message_status\">\n        <strong>sent {message.createdAt && '✓'}</strong>{' '}\n        {message.readAt && <strong>read ✓</strong>}\n      </div>\n    </div>\n  );\n}\n","import API from 'API';\nimport Message from 'components/pages/Messages/Message';\nimport useSubscription from 'hooks/useSubscription';\nimport EE from 'lib/eventEmitter';\nimport React, { useEffect, useState } from \"react\";\n\nimport { useLoadMessages } from 'hooks/api/messages';\nimport useCurrentAuth from 'hooks/useCurrentAuth';\n\nimport Text from \"components/uikit/Text\";\n\nimport { ChatType } from \"types/api/chat\";\n\nimport \"./Chat.css\";\nimport { MessageType } from 'types/api/message';\n\ninterface IProps {\n  chat: ChatType;\n}\n\nexport default function Chat({ chat }: IProps) {\n  const { user } = useCurrentAuth();\n  const { messages, isLoading, mutate } = useLoadMessages({ chatId: chat.id });\n  const from = chat.members.find((member) => member.id !== user.id);\n  const [inputValue, setInputValue] = useState<string>('');\n\n  useSubscription('notificationsUpdated', mutate);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value);\n  }\n  const handleSendMessage = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    const message = {\n      id: Math.random() * 100,\n      chatId: chat.id,\n      from: user,\n      text: inputValue,\n    };\n\n    API('POST', '/api/messages', message);\n    mutate([...(messages || []), message]);\n    setInputValue('');\n  }\n  const handleReceiveRandomMessage = () => {\n    API('POST', '/api/messages', {\n      id: Math.random() * 100,\n      chatId: chat.id,\n      from: from,\n      text: Math.random() * 100,\n    });\n  }\n\n  const handleMountMessage = async (message: MessageType) => {\n    const outgoing = message.from.id === user.id;\n\n    if (message.readAt || outgoing) return;\n\n    await API('PATCH', '/api/messages', {\n      id: message.id,\n      readAt: new Date(),\n    });\n\n    // mutate((messages = []) => {\n    //   return messages.map((message) => {\n    //     if (updatedMessage.id === message.id) return updatedMessage;\n    //     return message;\n    //   });\n    // }, false)\n    mutate()\n  }\n\n  return (\n    <div className=\"chat\">\n      <Text>\n        Messages from: <strong>{from?.name}</strong>\n        <i>{!messages && isLoading ? ' loading...' : isLoading ? ' updating...' : null}</i>\n      </Text>\n\n      {messages && (\n        <>\n          <div className=\"message-list\">\n            {messages.map((message) => {\n              const outgoing = message.from.id === user.id;\n\n              return (\n                <div className={`message-list__item ${outgoing ? 'message-list__item_outgoing' : ''}`} key={message.id}>\n                  <Message message={message} outgoing={outgoing} onMount={handleMountMessage} />\n                </div>\n              );\n            })}\n          </div>\n\n          <div className=\"chat__form\">\n            <form onSubmit={handleSendMessage} className=\"message-form\">\n              <input className=\"message-form__input\" type=\"text\" value={inputValue} onChange={handleInputChange} />\n              <input className=\"message-form__button\" type=\"submit\" value=\"Send message\" />\n            </form>\n\n            <div style={{ marginTop: 20 }}>\n              <button onClick={handleReceiveRandomMessage}>Receive random message</button>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n","import qs from \"query-string\";\nimport useSWR, { KeyedMutator } from \"swr\";\nimport { MessageType } from 'types/api/message';\nimport API from \"API\";\n\ntype useLoadMessagesType = (params: { chatId: number }) =>\n  {\n    messages: MessageType[] | undefined,\n    mutate: KeyedMutator<Partial<MessageType>[]>,\n    isLoading: boolean,\n  };\n\nexport const useLoadMessages: useLoadMessagesType = (params) => {\n  const { data, isValidating, mutate } = useSWR(\n    `/api/messages?${qs.stringify(params)}`,\n    (url: string) => API(\"GET\", url),\n  );\n\n  return {\n    mutate,\n    messages: data,\n    isLoading: isValidating,\n  };\n};\n","import Badge from 'components/uikit/Badge';\nimport { useLoadChats } from 'hooks/api/chats';\nimport Layout from \"components/shared/Layout\";\nimport Text from \"components/uikit/Text\";\nimport useCurrentAuth from 'hooks/useCurrentAuth';\nimport useSubscription from 'hooks/useSubscription';\nimport React, { useEffect, useState } from 'react';\nimport { ChatType } from 'types/api/chat';\nimport './Messages.css';\n\nimport Chat from './Chat';\n\nexport default function MessagesPage() {\n  const { user } = useCurrentAuth();\n  const { chats, mutate } = useLoadChats({ memberIds: [user.id] });\n  const [activeChat, setActiveChat] = useState<ChatType | null>(null);\n\n  useSubscription('notificationsUpdated', mutate);\n\n  useEffect(() => {\n    if (!activeChat && chats?.[0]) setActiveChat(chats[0]);\n  }, [activeChat, chats]);\n\n  return (\n    <Layout>\n      <Text tag=\"h1\">Chats</Text>\n\n      <div className=\"messages-page\">\n        <div className=\"messages-page__list\">\n          {chats ? chats.map((chat, i) => {\n            const from = chat.members.find((member) => member.id !== user.id);\n\n            return (\n              <button className=\"messages-page__list-item\" onClick={() => setActiveChat(chat)} key={chat.id}>\n                {from?.name} {chat.unreadMessageCount ? <Badge>{chat.unreadMessageCount}</Badge> : null}\n              </button>\n            )\n          }) : 'Loading...'}\n        </div>\n\n        <div className=\"messages-page__chat\">\n          {activeChat && <Chat chat={activeChat} />}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","import qs from \"query-string\";\nimport useSWR, { KeyedMutator } from \"swr\";\nimport { ChatType } from 'types/api/chat';\nimport API from \"API\";\n\ntype UseLoadChatsType = (params: {\n  memberIds: number[],\n}) => {\n  chats: ChatType[] | undefined,\n  mutate: KeyedMutator<Partial<ChatType>[]>,\n}\n\nexport const useLoadChats: UseLoadChatsType = (params) => {\n  const { data, mutate } = useSWR(\n    `/api/chats?${qs.stringify(params)}`,\n    (url: string) => API(\"GET\", url),\n  );\n\n  return {\n    chats: data,\n    mutate,\n  };\n};\n","import { useLoadCurrentAuth } from 'hooks/api/auth';\nimport Routes from 'lib/Routes';\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport Messages from './Messages';\n\nexport default function Resolver() {\n  const { currentAuth: { user } } = useLoadCurrentAuth();\n\n  if (user) return <Messages />;\n\n  return <Navigate to={Routes.login()} />\n}\n","import useCurrentAuth from 'hooks/useCurrentAuth';\nimport React, { Suspense } from \"react\";\nimport Loader from \"components/uikit/Loader\";\n\nconst ClientLayout = React.lazy(() => import(\"components/shared/Layout/ClientLayout\"));\nconst EmployeeLayout = React.lazy(() => import(\"components/shared/Layout/EmployeeLayout\"));\nconst OwnerLayout = React.lazy(() => import(\"components/shared/Layout/OwnerLayout\"));\n\ninterface IProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: IProps) {\n  const { user } = useCurrentAuth();\n\n  const mapRoleToComponent = {\n    client: ClientLayout,\n    employee: EmployeeLayout,\n    owner: OwnerLayout\n  };\n\n  const Layout = mapRoleToComponent[user.role];\n\n  return (\n    <Suspense fallback={<Loader />}>\n      <Layout>{children}</Layout>\n    </Suspense>\n  );\n}\n","import React from \"react\";\nimport \"./Badge.css\";\n\ninterface IProps {\n  children: React.ReactNode;\n}\n\nexport default function Badge({ children }: IProps) {\n\n  return (\n    <span className=\"badge\">\n      {children}\n    </span>\n  );\n}\n","import { useLoadCurrentAuth } from 'hooks/api/auth';\nimport { UserType } from 'types/api/user';\n\nexport default function useCurrentAuth(): { user: UserType } {\n  const { currentAuth } = useLoadCurrentAuth();\n\n  if (!currentAuth.user) throw new Error('User not loaded')\n\n  return { user: currentAuth.user };\n}\n","import qs from \"query-string\";\nimport { generatePath, Params } from 'react-router-dom';\nimport { routes, RouteIdType } from '../routeConfig';\n\ntype OptionsType = { params: Params, query: object };\n\ntype RoutesType = {\n  [key in RouteIdType]: (options?: OptionsType) => string;\n}\n\nconst Routes = routes.reduce((acc, route) => {\n  acc[route.id] = (options) => {\n    const { params, query } = options || {};\n    const path = generatePath(route.path, params);\n\n    return query ? `${path}${qs.stringify(query)}` : path;\n  }\n\n  return acc;\n}, {} as RoutesType);\n\n// Routes.home()\n// Routes.firmClient({ params: { code: 'AA1' } })\n// Routes.firmClientTasks({ query: { filter: 'resolved' } })\n\nexport default Routes;\n"],"names":["Message","message","outgoing","onMount","useEffect","className","text","createdAt","readAt","Chat","chat","user","useCurrentAuth","params","useSWR","qs","url","API","data","isValidating","mutate","messages","isLoading","useLoadMessages","chatId","id","from","members","find","member","useState","inputValue","setInputValue","useSubscription","handleMountMessage","Date","Text","name","map","onSubmit","e","preventDefault","Math","random","type","value","onChange","event","target","style","marginTop","onClick","MessagesPage","chats","useLoadChats","memberIds","activeChat","setActiveChat","Layout","tag","i","unreadMessageCount","Badge","Resolver","useLoadCurrentAuth","currentAuth","to","Routes","ClientLayout","React","EmployeeLayout","OwnerLayout","children","client","employee","owner","role","Suspense","fallback","Error","routes","acc","route","options","query","path","generatePath"],"sourceRoot":""}
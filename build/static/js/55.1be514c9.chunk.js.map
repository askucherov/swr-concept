{"version":3,"file":"static/js/55.1be514c9.chunk.js","mappings":"0NAMMA,EAAiBC,EAAAA,MAAW,kBAAM,iCAClCC,EAAmBD,EAAAA,MAAW,kBAAM,iCACpCE,EAAgBF,EAAAA,MAAW,kBAAM,iCAExB,SAASG,IACtB,IAAuBC,GAAWC,EAAAA,EAAAA,KAA1BC,YAAeF,KAEvB,MAAmB,YAAX,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMG,OAA0B,SAAC,IAAD,CAAcC,UAAWT,IAC1C,cAAX,OAAJK,QAAI,IAAJA,OAAA,EAAAA,EAAMG,OAA4B,SAAC,IAAD,CAAcC,UAAWP,IAC5C,WAAX,OAAJG,QAAI,IAAJA,OAAA,EAAAA,EAAMG,OAAyB,SAAC,IAAD,CAAcC,UAAWN,KAErD,SAAC,KAAD,CAAUO,GAAIC,EAAAA,EAAAA,Y,6CCPjBA,E,QAASC,EAAAA,QAAc,SAACC,EAAKC,GAQjC,OAPAD,EAAIC,EAAMC,IAAM,SAACC,GACf,MAA0BA,GAAW,GAA7BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,MACVC,GAAOC,EAAAA,EAAAA,IAAaN,EAAMK,KAAMF,GAEtC,OAAOC,EAAK,UAAMC,GAAN,OAAaE,EAAAA,UAAaH,IAAWC,GAG5CN,IACN,IAMH","sources":["components/pages/Settings/Resolver.tsx","lib/Routes.ts"],"sourcesContent":["import LoadablePage from 'components/uikit/LoadablePage';\nimport { useLoadCurrentAuth } from 'hooks/api/auth';\nimport Routes from 'lib/Routes';\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\n\nconst ClientSettings = React.lazy(() => import('components/pages/Settings/ClientSettings'));\nconst EmployeeSettings = React.lazy(() => import('components/pages/Settings/EmployeeSettings'));\nconst OwnerSettings = React.lazy(() => import('components/pages/Settings/OwnerSettings'));\n\nexport default function Resolver() {\n  const { currentAuth: { user } } = useLoadCurrentAuth();\n\n  if (user?.role === 'client') return <LoadablePage component={ClientSettings} />;\n  if (user?.role === 'employee') return <LoadablePage component={EmployeeSettings} />;\n  if (user?.role === 'owner') return <LoadablePage component={OwnerSettings} />;\n\n  return <Navigate to={Routes.login()} />\n}\n","import qs from \"query-string\";\nimport { generatePath, Params } from 'react-router-dom';\nimport { routes, RouteIdType } from '../routeConfig';\n\ntype OptionsType = { params: Params, query: object };\n\ntype RoutesType = {\n  [key in RouteIdType]: (options?: OptionsType) => string;\n}\n\nconst Routes = routes.reduce((acc, route) => {\n  acc[route.id] = (options) => {\n    const { params, query } = options || {};\n    const path = generatePath(route.path, params);\n\n    return query ? `${path}${qs.stringify(query)}` : path;\n  }\n\n  return acc;\n}, {} as RoutesType);\n\n// Routes.home()\n// Routes.firmClient({ params: { code: 'AA1' } })\n// Routes.firmClientTasks({ query: { filter: 'resolved' } })\n\nexport default Routes;\n"],"names":["ClientSettings","React","EmployeeSettings","OwnerSettings","Resolver","user","useLoadCurrentAuth","currentAuth","role","component","to","Routes","routes","acc","route","id","options","params","query","path","generatePath","qs"],"sourceRoot":""}